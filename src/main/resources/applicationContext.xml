<?xml version="1.0" encoding="UTF-8"?>
<!-- 查找最新的schemaLocation 访问 http://www.springframework.org/schema/ -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
        
     <!-- 配置扫描路径 -->
	<context:annotation-config />
	<!-- 开启自动扫描Bean，一般配到基础包即可。使用这个可以不配置-打开注解模式 -->

	<!-- spring加载资源文件 -->
	<bean id="propertiesConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>


	<!-- 池数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 驱动类 -->
		<property name="driverClass" value="${DriverClassName}" />
		<property name="jdbcUrl" value="${URL}" />
		<property name="user" value="${username}" />
		<property name="password" value="${password}" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${hibernate.minPoolSize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${hibernate.maxPoolSize}" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${hibernate.initialPoolSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${hibernate.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${hibernate.acquireIncrement}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。
			所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
			0 -->
		<property name="maxStatements" value="${hibernate.maxStatements}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${hibernate.idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${hibernate.acquireRetryAttempts}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${hibernate.breakAfterAcquireFailure}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="${hibernate.testConnectionOnCheckout}" />
	</bean>


	<!-- sessionfactory 配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- connection -->
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- hibernate属性配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">${hibernate.temp.use_jdbc_metadata_defaults}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>

			</props>
		</property>

		<!-- packagesToScan搜索所有标注了Entity的Class -->
		<property name="packagesToScan">
			<list>
				<!-- 添加各自业务的entity -->
				<value>com.zzy.*</value>
			</list>
		</property>
	</bean>




	<!-- Hibernate事务管理器 -->
	<!-- SpringMVC 和 hibenate4 结合必须加 并且在services 中加上 @Transactional 否则  No Session found for current thread 异常 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory"><ref bean="sessionFactory" /></property>
	</bean>


	<!--
	<aop:config>
		<aop:pointcut id="mypointcut" expression="execution(* *.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="mypointcut" />
	</aop:config>
	-->

	<bean id="basedao" class="com.zzy.dao.impl.BaseDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>




	<!--<bean id="utilService" class="com.zzy.service.impl.UtilServiceImpl">
		<property name="basedao" ref="basedao"></property>
	</bean>-->



</beans>  